---
const links = [
  {
    ref: '01',
    name: 'Home',
    href: '/',
  },
  {
    ref: '02',
    name: 'Blog',
    href: '/blog',
  },
  {
    ref: '03',
    name: 'About',
    href: '/about',
  },
  {
    ref: '04',
    name: 'Contact',
    href: 'javascript:decryptEmail("aGVsbG9Acm9uYWxkdGVicmFrZS5ubA==");'
  },
  // {
  //   ref: '05',
  //   name: 'Snippets',
  //   href: '/snippets',
  // },
];

import FeaturedPost from '@/components/FeaturedPost.astro';

// Use the v2 getCollection to fetch all blog posts, and then sort them by date.
import { getCollection } from 'astro:content';
const featuredBlogEntry = await getCollection('blog', ({ data }) => {
  return data.featured === true;
});

---

<header
  class="transition bg-coolGray-50 dark:bg-primary-950"
  id="header" 
>
  <div class="mx-auto flex max-w-8xl items-center justify-between px-4 py-4 lg:max-w-8xl">
    <div class="flex">
      <a
        href="/"
        class="focus-visible:outline-primary-950 dark:group-focus-visible:outline-primary-200 rounded-md focus-visible:outline focus-visible:outline-2"
      >
        <span class="sr-only">Ronald te Brake</span>
        <img
          class="h-12 w-auto"
          src="/ronaldtebrake-dark.svg"
          alt="Logo"
          width="191"
          height="48"
        />
      </a>
    </div>

    <div class="-mr-2 flex items-center space-x-2 sm:space-x-3">
      <!-- Toggle menu -->
      <button
        type="button"
        class="text-primary-950 dark:text-primary-200 hover:bg-primary-500/10 dark:hover:bg-primary-400/10 ring-primary-950 inline-flex h-14 w-14 items-center justify-center rounded-full transition focus:outline-none focus-visible:ring-2"
        aria-controls="website-menu"
        id="triggerToggle"
      >
        <span class="sr-only">Toggle menu</span>
        <svg
          class="h-8 w-8 block"
          fill="currentColor"
          viewBox="0 0 24 24"
          aria-hidden="true"
        >
        <path
          d="M3 6C3 5.44772 3.44772 5 4 5H20C20.5523 5 21 5.44772 21 6C21 6.55228 20.5523 7 20 7H4C3.44772 7 3 6.55228 3 6Z"
          fill="currentColor"
        />
        <path
          d="M3 18C3 17.4477 3.44772 17 4 17H20C20.5523 17 21 17.4477 21 18C21 18.5523 20.5523 19 20 19H4C3.44772 19 3 18.5523 3 18Z"
          fill="currentColor"
        />
        <path
          d="M3 12C3 11.4477 3.44772 11 4 11H20C20.5523 11 21 11.4477 21 12C21 12.5523 20.5523 13 20 13H10.2625L7.61456 15.6479L4.96662 13H4C3.44772 13 3 12.5523 3 12Z"
          fill="currentColor"
        />
        </svg>
        <svg
          class="h-8 w-8 hidden"
          xmlns="http://www.w3.org/2000/svg"
          fill="currentColor"
          viewBox="0 0 24 24"
          aria-hidden="true"
          width="32"
          height="32"
        >
          <path
            d="M12.0007 10.5865L16.9504 5.63672L18.3646 7.05093L13.4149 12.0007L18.3646 16.9504L16.9504 18.3646L12.0007 13.4149L7.05093 18.3646L5.63672 16.9504L10.5865 12.0007L5.63672 7.05093L7.05093 5.63672L12.0007 10.5865Z"
          ></path>
        </svg>
      </button>
    </div>
  </div>

  <!-- Menu content -->
  <div
    class="mx-auto max-w-2xl px-4 sm:px-6 lg:max-w-7xl lg:px-8"
    id="website-menu"
  >
    <div class="grid grid-cols-1 gap-16 pt-6 sm:pb-6 lg:pb-24 lg:grid-cols-2 lg:pt-12" id="links">
      {
        featuredBlogEntry.map((post, index) => index < 1 && (
          <FeaturedPost url={`/blog/${post.slug}/`} title={post.data.title} pubDate={post.data.pubDate} description={post.data.description} category={post.data.category}, heroImage={post.data.heroImage} />
        ))
      }  

      <!-- Navigation -->
      <nav class="divide-primary-900/10 dark:divide-primary-300/10 flex flex-col gap-1 divide-y">
        {
          links.map((link) => (
            <a
              href={link.href}
              class="text-primary-950 dark:text-primary-200 group inline-flex py-6 text-3xl font-medium tracking-tight transition focus-visible:outline-none sm:py-8 sm:text-4xl"
            >
              <div class="group-focus-visible:outline-primary-950 dark:group-focus-visible:outline-primary-200 flex flex-1 items-center justify-between rounded-3xl group-focus-visible:outline group-focus-visible:outline-2 group-focus-visible:outline-offset-2">
                <div class="flex items-center gap-6">
                  <span class="text-xs">{link.ref}</span>
                  <span class="group-hover:underline">{link.name}</span>
                </div>
                <span class="group-hover:rotate-45 transform transition duration-100 h-6 w-6 sm:h-8 sm:w-8">
                  <svg viewbox="0 0 33 33" fill="none" xmlns="http://www.w3.org/2000/svg" class="stroke-primary-600 dark:stroke-primary-600">
                    <path d="M30 3L3 30" stroke="currentColor" stroke-width="4.3875" stroke-miterlimit="10" stroke-linecap="round" stroke-linejoin="round"></path>
                    <path d="M30 27.758V3H5.24196" stroke="currentColor" stroke-width="4.3875" stroke-miterlimit="10" stroke-linecap="round" stroke-linejoin="round"></path>
                  </svg>
                </span>
              </div>
            </a>
          ))
        }
      </nav>
    </div>
  </div>
</header>

<script is:inline>
  function decryptEmail(encoded) {
    var address = atob(encoded);
    window.location.href = "mailto:" + address;
  }
</script>

<script>
  function init() {
    const menuBtn = document.getElementById('triggerToggle');
    const menuContainer = document.getElementById('website-menu');
    const menuLinks = document.getElementById('links');
    const header = document.getElementById('header');

    menuBtn?.addEventListener('click', (e) => {
      e.preventDefault();

      header?.classList.toggle('bg-coolGray-50');
      header?.classList.toggle('bg-coolGray-150');

      // Toggle the menu icon
      const myElement = document.getElementById("triggerToggle");
      for (const child of myElement.children) {
        if (child instanceof SVGElement) {
          child.classList.toggle('hidden');
          child.classList.toggle('block');
        }
      }

      // Toogle the height.
      const linksHeight = menuLinks?.getBoundingClientRect().height;
      const containerHeight = menuContainer?.getBoundingClientRect().height;
      
      containerHeight === 0
        ? menuContainer.style.height = `${linksHeight}px`
        : menuContainer.style.height = 0;
    });
  }

  // Initialize on first load
  init()

  // Re-initialize after swapping pages
  document.addEventListener("astro:after-swap", init)
</script>

<style>
  #website-menu {
    height: 0;
    overflow: hidden;
    transition: all 0.3s ease;
  }
</style>